repositories:
  - name: bitnami
    url: https://charts.bitnami.com/bitnami

  - name: jetstack
    url: https://charts.jetstack.io

  - name: twuni
    url: https://helm.twun.io

  - name: istio
    url: https://istio-release.storage.googleapis.com/charts

helmDefaults:
  timeout: 600

releases:
  - name: istio-base
    namespace: istio-system
    chart: istio/base
    version: 1.24.2
    wait: true
    waitForJobs: true

  - name: istiod
    namespace: istio-system
    chart: istio/istiod
    version: 1.24.2
    wait: true
    waitForJobs: true
    needs:
      - istio-base
    values:
      - meshConfig:
          defaultConfig:
            holdApplicationUntilProxyStarts: true
    hooks:
      - events: [postsync]
        showlogs: true
        command: sh
        args:
          - -c
          - "kubectl label namespace default istio-injection=enabled"

  - name: cert-manager
    namespace: cert-manager
    chart: jetstack/cert-manager
    version: v1.16.3
    wait: true
    waitForJobs: true
    values:
      - installCRDs: true
        extraArgs:
          - --enable-certificate-owner-ref
        webhook:
          securePort: 10260

  - name: docker-registry
    namespace: default
    chart: twuni/docker-registry
    version: 2.2.3
    wait: true
    needs:
      - istio-system/istiod
    values:
      - secrets:
          haSharedSecret: docker-registry-ha-shared-secret
        service:
          type: LoadBalancer

  - name: docker-registry-secure
    namespace: default
    chart: twuni/docker-registry
    version: 2.2.3
    wait: true
    needs:
      - istio-system/istiod
    values:
      - secrets:
          htpasswd: "test-user:$2y$05$1eGDzSDRv.qRvDAhZOvFker9bqg06hlQCL3pbnga139jOtjtrdf8e"
          haSharedSecret: docker-registry-ha-shared-secret
        service:
          type: LoadBalancer

  - name: rabbitmq
    namespace: default
    chart: bitnami/rabbitmq
    version: 14.7.0
    wait: true
    needs:
      - istio-system/istiod
    values:
      - auth:
          password: rabbitmq-password
          erlangCookie: rabbitmq-erlang-cookie
        persistence:
          enabled: false
        service:
          type: LoadBalancer

  - name: redis
    namespace: default
    chart: bitnami/redis
    version: 19.6.4
    wait: true
    needs:
      - istio-system/istiod
    values:
      - auth:
          password: redis-password
        master:
          persistence:
            enabled: false
          service:
            type: LoadBalancer
        replica:
          replicaCount: 0

  - name: hephaestus
    namespace: default
    chart: ../../deployments/helm/hephaestus
    wait: true
    waitForJobs: true
    needs:
      - istio-system/istiod
      - cert-manager/cert-manager
      - rabbitmq
      - redis
    hooks:
      - events: [postuninstall]
        showlogs: true
        command: sh
        args:
          - -c
          - "kubectl delete pvc -l app.kubernetes.io/instance=hephaestus"
    values:
      - istio:
          enabled: true
        registries:
          "docker-registry-secure:5000":
            http: true
          "docker-registry:5000":
            http: true
        buildkit:
          rootless: false
          gcKeepStorage: 75000000000
          persistence:
            size: 100Gi
        controller:
          manager:
            image:
              pullPolicy: Always
            messaging:
              enabled: true
              amqp:
                url: "amqp://user:rabbitmq-password@rabbitmq:5672"
          vector:
            config:
              transforms:
                keyed_logs:
                  type: remap
                  inputs:
                    - hephaestus_output
                  source: |-
                    message = parse_json!(.message)
                    if !exists(message.logKey) || is_nullish(message.logKey) || is_nullish(message.msg) {
                      abort
                    }
                    . = {
                      "event": .,
                      "stream": "stdout",
                      "time": message.ts,
                      "time_nano": to_string(to_unix_timestamp(parse_timestamp!(message.ts, "%+"), unit: "nanoseconds")),
                      "log": message.msg,
                      "logKey": message.logKey,
                    }
              sinks:
                redis:
                  type: redis
                  inputs:
                    - keyed_logs
                  url: "redis://:redis-password@redis-master:6379/0"
                  key: "{{`{{ logKey }}`}}"
                  encoding:
                    codec: json
