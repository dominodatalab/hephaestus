// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1"
	scheme "github.com/dominodatalab/hephaestus/pkg/clientset/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ImageBuildsGetter has a method to return a ImageBuildInterface.
// A group's client should implement this interface.
type ImageBuildsGetter interface {
	ImageBuilds(namespace string) ImageBuildInterface
}

// ImageBuildInterface has methods to work with ImageBuild resources.
type ImageBuildInterface interface {
	Create(ctx context.Context, imageBuild *v1.ImageBuild, opts metav1.CreateOptions) (*v1.ImageBuild, error)
	Update(ctx context.Context, imageBuild *v1.ImageBuild, opts metav1.UpdateOptions) (*v1.ImageBuild, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, imageBuild *v1.ImageBuild, opts metav1.UpdateOptions) (*v1.ImageBuild, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ImageBuild, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ImageBuildList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ImageBuild, err error)
	ImageBuildExpansion
}

// imageBuilds implements ImageBuildInterface
type imageBuilds struct {
	*gentype.ClientWithList[*v1.ImageBuild, *v1.ImageBuildList]
}

// newImageBuilds returns a ImageBuilds
func newImageBuilds(c *HephaestusV1Client, namespace string) *imageBuilds {
	return &imageBuilds{
		gentype.NewClientWithList[*v1.ImageBuild, *v1.ImageBuildList](
			"imagebuilds",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.ImageBuild { return &v1.ImageBuild{} },
			func() *v1.ImageBuildList { return &v1.ImageBuildList{} }),
	}
}
