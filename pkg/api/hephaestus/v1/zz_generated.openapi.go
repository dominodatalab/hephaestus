//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

package v1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.BasicAuthCredentials":              schema_pkg_api_hephaestus_v1_BasicAuthCredentials(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuild":                        schema_pkg_api_hephaestus_v1_ImageBuild(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildAMQPOverrides":           schema_pkg_api_hephaestus_v1_ImageBuildAMQPOverrides(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildList":                    schema_pkg_api_hephaestus_v1_ImageBuildList(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessage":                 schema_pkg_api_hephaestus_v1_ImageBuildMessage(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageAMQPConnection":   schema_pkg_api_hephaestus_v1_ImageBuildMessageAMQPConnection(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageList":             schema_pkg_api_hephaestus_v1_ImageBuildMessageList(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageRecord":           schema_pkg_api_hephaestus_v1_ImageBuildMessageRecord(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageSpec":             schema_pkg_api_hephaestus_v1_ImageBuildMessageSpec(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageStatus":           schema_pkg_api_hephaestus_v1_ImageBuildMessageStatus(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildSpec":                    schema_pkg_api_hephaestus_v1_ImageBuildSpec(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildStatus":                  schema_pkg_api_hephaestus_v1_ImageBuildStatus(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildStatusTransitionMessage": schema_pkg_api_hephaestus_v1_ImageBuildStatusTransitionMessage(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildTransition":              schema_pkg_api_hephaestus_v1_ImageBuildTransition(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCache":                        schema_pkg_api_hephaestus_v1_ImageCache(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCacheList":                    schema_pkg_api_hephaestus_v1_ImageCacheList(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCacheSpec":                    schema_pkg_api_hephaestus_v1_ImageCacheSpec(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCacheStatus":                  schema_pkg_api_hephaestus_v1_ImageCacheStatus(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.RegistryCredentials":               schema_pkg_api_hephaestus_v1_RegistryCredentials(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.SecretCredentials":                 schema_pkg_api_hephaestus_v1_SecretCredentials(ref),
		"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.SecretReference":                   schema_pkg_api_hephaestus_v1_SecretReference(ref),
	}
}

func schema_pkg_api_hephaestus_v1_BasicAuthCredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuild(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildSpec", "github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildAMQPOverrides(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"exchangeName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"queueName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuild"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuild", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildMessage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageSpec", "github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildMessageAMQPConnection(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"uri": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"queue": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"exchange": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"uri", "queue", "exchange"},
			},
		},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildMessageList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessage"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessage", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildMessageRecord(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"sentAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildStatusTransitionMessage"),
						},
					},
				},
				Required: []string{"sentAt", "message"},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildStatusTransitionMessage", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildMessageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"amqp": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageAMQPConnection"),
						},
					},
				},
				Required: []string{"amqp"},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageAMQPConnection"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildMessageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"amqpSentMessages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageRecord"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildMessageRecord"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageBuildSpec specifies the desired state of an ImageBuild resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"context": {
						SchemaProps: spec.SchemaProps{
							Description: "Context is a remote URL used to fetch the build context.  Overrides dockerfileContents if present.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dockerfileContents": {
						SchemaProps: spec.SchemaProps{
							Description: "DockerfileContents specifies the contents of the Dockerfile directly in the CR.  Ignored if context is present.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "Images is a list of images to build and push.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"buildArgs": {
						SchemaProps: spec.SchemaProps{
							Description: "BuildArgs are applied to the build at runtime.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"logKey": {
						SchemaProps: spec.SchemaProps{
							Description: "LogKey is used to uniquely annotate build logs for post-processing",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"registryAuth": {
						SchemaProps: spec.SchemaProps{
							Description: "RegistryAuth credentials used to pull/push images from/to private registries.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.RegistryCredentials"),
									},
								},
							},
						},
					},
					"amqpOverrides": {
						SchemaProps: spec.SchemaProps{
							Description: "AMQPOverrides to the main controller configuration.",
							Ref:         ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildAMQPOverrides"),
						},
					},
					"importRemoteBuildCache": {
						SchemaProps: spec.SchemaProps{
							Description: "ImportRemoteBuildCache from one or more canonical image references when building the images.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"disableBuildCache": {
						SchemaProps: spec.SchemaProps{
							Description: "DisableLocalBuildCache  will disable the use of the local cache when building the images.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"disableCacheExport": {
						SchemaProps: spec.SchemaProps{
							Description: "DisableCacheLayerExport will remove the \"inline\" cache metadata from the image configuration.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secrets": {
						SchemaProps: spec.SchemaProps{
							Description: "Secrets provides references to Kubernetes secrets to expose to individual image builds.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.SecretReference"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildAMQPOverrides", "github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.RegistryCredentials", "github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.SecretReference"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"allocationTime": {
						SchemaProps: spec.SchemaProps{
							Description: "AllocationTime is the total time spent allocating a build pod.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"buildTime": {
						SchemaProps: spec.SchemaProps{
							Description: "BuildTime is the total time spent during the image build process.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"builderAddr": {
						SchemaProps: spec.SchemaProps{
							Description: "BuilderAddr is the routable address to the buildkit pod used during the image build process.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"compressedImageSizeBytes": {
						SchemaProps: spec.SchemaProps{
							Description: "CompressedImageSizeBytes is the total size of all the compressed layers in the image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"digest": {
						SchemaProps: spec.SchemaProps{
							Description: "Digest is the image digest",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of string keys and values corresponding OCI image config labels. Labels contains arbitrary metadata for the container.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
					"transitions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildTransition"),
									},
								},
							},
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageBuildTransition", "k8s.io/apimachinery/pkg/apis/meta/v1.Condition"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildStatusTransitionMessage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageBuildStatusTransitionMessage contains information about ImageBuild status transitions.\n\nThis type is used to publish JSON-formatted messages to one or more configured messaging endpoints when ImageBuild resources undergo phase changes during the build process.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the ImageBuild resource that underwent a transition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations present on the resource.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"objectLink": {
						SchemaProps: spec.SchemaProps{
							Description: "ObjectLink points to the resource inside the Kubernetes API.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"previousPhase": {
						SchemaProps: spec.SchemaProps{
							Description: "PreviousPhase of the resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"currentPhase": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentPhase of the resource.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"occurredAt": {
						SchemaProps: spec.SchemaProps{
							Description: "OccurredAt indicates when the transition occurred.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"imageURLs": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageURLs contains a list of fully-qualified registry images. This field is only populated when an ImageBuild transitions to PhaseSucceeded.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"errorMessage": {
						SchemaProps: spec.SchemaProps{
							Description: "ErrorMessage contains the details of error when one occurs.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "objectLink", "previousPhase", "currentPhase", "occurredAt"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageBuildTransition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"previousPhase": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"occurredAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"previousPhase", "phase"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageCache(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCacheSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCacheStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCacheSpec", "github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCacheStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageCacheList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCache"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.ImageCache", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageCacheSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"images": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"registryAuth": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.RegistryCredentials"),
									},
								},
							},
						},
					},
				},
				Required: []string{"images"},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.RegistryCredentials"},
	}
}

func schema_pkg_api_hephaestus_v1_ImageCacheStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"buildkitPods": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"cachedImages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Condition"},
	}
}

func schema_pkg_api_hephaestus_v1_RegistryCredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"server": {
						SchemaProps: spec.SchemaProps{
							Description: "NOTE: this field was previously used to assert the presence of an auth entry inside of secret credentials. if the\n Server was missing, then an error was raised. this design is limiting because it requires users to create\n several `registryAuth` items with the same secret if they want to verify the presence. in a future api version,\n we may remove the Server field from this type and replace it with one or more fields that service the needs all\n credential types.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cloudProvided": {
						SchemaProps: spec.SchemaProps{
							Description: "NOTE: this field was previously used to determine whether to fetch credentials from the cloud a given server. this is now done automatically and this field is no longer necessary.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"basicAuth": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.BasicAuthCredentials"),
						},
					},
					"secret": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.SecretCredentials"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.BasicAuthCredentials", "github.com/dominodatalab/hephaestus/pkg/api/hephaestus/v1.SecretCredentials"},
	}
}

func schema_pkg_api_hephaestus_v1_SecretCredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_api_hephaestus_v1_SecretReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}
