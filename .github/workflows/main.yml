name: CI
on:
  push:
    branches: [main]
    tags: ['v[0-9]+.[0-9]+.[0-9]+*']
  pull_request: {}
env:
  GO_VERSION: "1.25"
  BUILD_PLATFORMS: linux/amd64,linux/arm64
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go tools
        uses: actions/cache@v4.3.0
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tools-${{ hashFiles('tools/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-
      - name: Lint
        run: make lint
      - name: Sanity check
        run: make check
      - name: Build
        run: make build
      - name: Unit test
        run: make test
  docker:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version: ${{ steps.docker_push.outputs.version }}
    env:
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME || 'blank' }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD || 'blank' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./Dockerfile.debug # debug has to be first because Github Matrixes share same output and last wins
            registry_gh: ghcr.io
            username_gh: dominodatalab
            password_gh: "blank"
            repository_gh: ${{ github.repository }}
            registry_quay: quay.io
            username_quay: "blank"
            password_quay: "blank"
            repository_quay: "hephaestus"
            suffix: "-debug"
            platforms: linux/amd64,linux/arm64
          - dockerfile: ./Dockerfile
            registry_gh: ghcr.io
            username_gh: dominodatalab
            password_gh: "blank"
            repository_gh: ${{ github.repository }}
            registry_quay: quay.io
            username_quay: "blank"
            password_quay: "blank"  # we have to resort to tricks like this because GitHub doesnt allow secrets in matrix sections
            repository_quay: "hephaestus"
            suffix: ""
            platforms: linux/amd64,linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - id: docker_push
        uses: ./.github/actions/push-multiple-container-images
        with:
          dockerfile: ${{ matrix.dockerfile }}
          password_quay: ${{ env.QUAY_PASSWORD }}
          platforms: ${{ matrix.platforms }}
          registry_gh: ${{ matrix.registry_gh }}
          registry_quay: ${{ matrix.registry_quay }}
          repository_quay: ${{ matrix.repository_quay }}
          suffix: ${{ matrix.suffix }}
          username_gh: ${{ matrix.username_gh }}
          username_quay: ${{ env.QUAY_USERNAME }}
  helm:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Install Helm
        uses: azure/setup-helm@v4.3.1
        with:
          version: v3.19.0
      - id: helm_pkg
        name: Package Helm chart
        shell: bash
        run: |
          napp_version=${{ needs.docker.outputs.version }}
          app_version=${napp_version%-debug}
          if [[ "${app_version}" =~ ^(pr-[[:digit:]]+|main)$ ]]; then
            semantic_version="0.0.0-$app_version"
          else
            semantic_version="${app_version}"
          fi
          helm package deployments/helm/hephaestus \
          --app-version "$app_version" \
          --version "$semantic_version"
          echo "artifact=hephaestus-${semantic_version}.tgz" >> "${GITHUB_OUTPUT}"
      - name: Push Helm chart to GHCR
        uses: ./.github/actions/push-helm-chart
        with:
          registry: ghcr.io
          namespace: "${{ github.repository_owner }}/helm"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          artifact: ${{ steps.helm_pkg.outputs.artifact }}
      - name: Push Helm chart to GCR
        uses: ./.github/actions/push-helm-chart
        with:
          registry: gcr.io
          namespace: ${{ secrets.GCR_NAMESPACE }}
          username: ${{ secrets.GCR_USERNAME }}
          password: ${{ secrets.GCR_PASSWORD }}
          password_base64_encoded: "true"
          artifact: ${{ steps.helm_pkg.outputs.artifact }}
  sdks:
    runs-on: ubuntu-latest
    needs: build
    env:
      MAVEN_DOCKER_IMAGE: maven:3-eclipse-temurin-24-noble
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Generate SDKS
        run: |
          export BRANCH_NAME=$(echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} | sed -r 's|/+|-|g')
          make sdks
      - name: Generate Java JAR
        run: |
          docker run -q --rm \
            --workdir /wd \
            --volume "${HOME}"/.m2:/root/.m2 \
            --volume "$(pwd)"/sdks/java:/wd \
            "${MAVEN_DOCKER_IMAGE}" mvn --settings settings.xml package
      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: hephaestus-client-java.jar
          path: sdks/java/target/*.jar
          if-no-files-found: error
      - name: Publish JAR to GitHub
        run: |
          docker run --rm \
            --workdir /wd \
            --volume "${HOME}"/.m2:/root/.m2 \
            --volume "$(pwd)"/sdks/java:/wd \
            --env ARTIFACTORY_USERNAME=${{ secrets.ARTIFACTORY_USERNAME }} \
            --env ARTIFACTORY_PASSWORD=${{ secrets.ARTIFACTORY_PASSWORD }} \
            --env GITHUB_USERNAME=${{ github.actor }} \
            --env GITHUB_PASSWORD=${{ secrets.GITHUB_TOKEN }} \
            "${MAVEN_DOCKER_IMAGE}" mvn --settings settings.xml \
            --activate-profiles github -DskipTests deploy
      - name: Publish Jar to Artifactory
        uses: nick-fields/retry@v3.0.2
        with:
          retry_on: error
          max_attempts: 10
          timeout_minutes: 1
          retry_wait_seconds: 5
          command: |
            docker run --rm \
              --workdir /wd \
              --volume "${HOME}"/.m2:/root/.m2 \
              --volume $(pwd)/sdks/java:/wd \
              --env "ARTIFACTORY_USERNAME=${{ secrets.ARTIFACTORY_USERNAME }}" \
              --env "ARTIFACTORY_PASSWORD=${{ secrets.ARTIFACTORY_PASSWORD }}" \
              --env "GITHUB_USERNAME=${{ github.actor }}" \
              --env "GITHUB_PASSWORD=${{ secrets.GITHUB_TOKEN }}" \
              "${MAVEN_DOCKER_IMAGE}" mvn --settings settings.xml \
              --activate-profiles artifactory -DskipTests deploy
