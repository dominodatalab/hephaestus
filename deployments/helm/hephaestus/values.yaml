# Global parameters applied to all images in this chart
global:
  imageRegistry: ""
  imagePullSecrets: []

# Replace the name of the chart defined in Chart.yaml
nameOverride: ""

# Replace the generated name (release+chart name)
fullnameOverride: ""

# Controller manager configuration
controller:
  # Controller manager image
  # The default image tag is the chart appVersion.
  image:
    registry: ghcr.io
    repository: dominodatalab/hephaestus
    tag: ""
    pullPolicy: IfNotPresent

  # Build status messaging configuration
  messaging:
    # Enable message publisher
    enabled: false
    # Remote AMQP server configuration
    amqp:
      url: "amqp://user:password@rabbitmq.default:5672"
      exchange: ""
      queue: "hephaestus.imagebuilds.status"
    # Remote Kafka cluster configuration
    kafka: {}

  # Manager logging configuration
  logging:
    # Level at which stacktraces are printed can be either 'info', 'error', or 'panic'
    stacktraceLevel: error
    # Logs sent to stdout/stderr
    container:
      # Level can be 'debug', 'info', 'error', or any integer value >= 0 which corresponds to custom debug levels of increasing verbosity
      level: info
      # Defaults to 'console' but can also be 'json'
      encoding: console
    # Logs sent to JSON file for post-processing. These logs are only produced when log processor is enabled
    logfile:
      level: info

  # Maximum number of concurrent builds which can be run
  imageBuildMaxConcurrency: 5

  # Webhook server port
  webhookPort: 9443

  # Prometheus metric ports
  metricsPort: 8080

  # Health probe port
  healthProbePort: 8081

  # Limit watch to a specific set of namespaces, default is all namespaces
  watchNamespaces: []

  # Duration after which buildkit cluster is inspected for idle pods
  # Defaults to "1m"
  poolSyncWaitTime: null

  # Duration after which idle buildkit pods will be terminated
  # Defaults to "10m"
  poolMaxIdleTime: null

  # Resource requests and limits
  resources:
    requests: {}
    limits: {}

  # Metrics configuration for the manager
  metrics:
    # Enable the export of prometheus metrics
    enabled: true
    # Allow ingress traffic from prometheus pods with the following labels
    podLabels:
      app.kubernetes.io/name: prometheus
    # Namespace labels where prometheus is running if different from app's namespace
    namespaceLabels: {}

  # Configure pod security context
  podSecurityContext: {}

  # Configure container security context
  containerSecurityContext: {}

  # Extra labels for manager pods
  podLabels: {}

  # Annotations for manager pods
  podAnnotations: {}

  # Tolerations for manager pod assignment
  tolerations: []

  # Affinities for manager pod assignment
  affinity: {}

  # Node labels for manager pod assignment
  nodeSelector: {}

  # Manager pods priorityClassName
  priorityClassName: ""

  # Number of manager instances to run. Leader election will be enabled
  # whenever this value is greater than 1; this ensures that only one instance
  # is active at a time.
  replicaCount: 1

  # Service account configuration
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

# Log processor configuration
logProcessor:
  # Log processor image
  image:
    registry: ""
    repository: timberio/vector
    tag: 0.20.X-distroless-static
    pullPolicy: IfNotPresent

  # Enable the deployment of the log processing sidecar
  enabled: true

  # Resource requests and limits
  resources:
    requests: {}
    limits: {}

  # Configure the ingestion, transformation, and delivery of your logs
  config:
    sources: |-
      hephaestus_logs:
        type: file
        include:
          - {{ include "hephaestus.logfilePath" . }}
    transforms: |-
      remap:
        type: remap
        inputs:
          - hephaestus_logs
        source: |-
          incoming = parse_json!(.message)
          if !exists(incoming.logKey) || is_nullish(incoming.logKey) {
            abort
          }
          . = {"logKey": incoming.logKey, "timestamp": incoming.ts, "message": incoming.msg}
    sinks: |-
      stdout:
        type: console
        inputs:
          - remap
        encoding:
          codec: json

# Buildkit subchart configuration
# See charts/buildkit/values.yaml for a list of available values.
buildkit:
  mtls:
    enabled: true
