# Global parameters applied to all images in this chart
global:
  imageRegistry: ""
  imagePullSecrets: []

# Replace the name of the chart defined in Chart.yaml
nameOverride: ""

# Replace the generated name (release+chart name)
fullnameOverride: ""

# If true, CRD resources will be installed as part of the Helm chart release.
installCRDs: true

# If true, CRD resources will be uninstalled as part of the Helm chart release uninstallation.
# Uninstalling CRD resources will DELETE all related custom resources.
uninstallCRDs: false

# Restrict network access to controller and buildkit pods
enableNetworkPolicies: true

# Applied to all pods
podAnnotations: {}
podLabels: {}
podEnv: {}

clusterDomain: cluster.local

# Istio configuration
istio:
  # Enable support for environments with Istio installed
  enabled: false
  # Elevate pod execution permissions so that Istio's init container can modify
  # network settings when CNI plugin is NOT installed.
  cni: false

# New Relic APM configuration
newRelic:
  # Enable monitoring
  enabled: false
  # Application name
  appName: hephaestus
  # Account API key
  licenseKey: ""
  # Tag metadata added to metrics
  labels: {}

# Configuration for buildkit and controller that adds the ability to pull/push images
# from/to insecure (self-signed TLS) and http registries.
registries: {}
  # myserver:
  #   insecure: true
  #   http: true

# Controller configuration
controller:
  # Number of instances to run. Leader election will be enabled whenever this
  # value is greater than 1; this ensures that only one instance is active at
  # any given time.
  replicaCount: 1

  # Service account configuration
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # Metrics configuration
  metrics:
    # Enable the export of prometheus metrics
    enabled: true
    # Allow ingress traffic from prometheus pods with the following labels
    podLabels:
      app.kubernetes.io/name: prometheus
    # Namespace labels where prometheus is running if different from app's namespace
    namespaceLabels: {}

  # Configure controller pod security context
  podSecurityContext:
    runAsNonRoot: true
    # nonroot
    runAsUser: 65532
    seLinuxOptions:
      type: spc_t

  # Annotations for controller pods
  podAnnotations: {}

  # Extra labels for controller pods
  podLabels: {}

  # Tolerations for controller pod assignment
  tolerations: []

  # Affinities for controller pod assignment
  affinity: {}

  # Node labels for controller pod assignment
  nodeSelector: {}

  # Controller pods priorityClassName
  priorityClassName: ""

  # Additional volumes
  extraVolumes: []

  # Additional volume mounts added to both the manager and vector containers
  extraVolumeMounts: []

  # Manager configuration
  manager:
    # Manager image (default image tag is the chart appVersion)
    image:
      registry: ghcr.io
      repository: dominodatalab/hephaestus
      tag: ""
      pullPolicy: IfNotPresent
      pullSecrets: []

    imageBuild:
      # Maximum number of concurrent builds which can be run
      concurrency: 5
      historyLimit: 5

    # Webhook server port
    webhookPort: 9443

    # Prometheus metric ports
    metricsPort: 8080

    # Health probe port
    healthProbePort: 8081

    # Limit watch to a specific set of namespaces, default is all namespaces
    watchNamespaces: []

    # Duration after which buildkit cluster is inspected for idle pods
    # Defaults to "30s"
    poolSyncWaitTime: null

    # Duration after which idle buildkit pods will be terminated
    # Defaults to "10m"
    poolMaxIdleTime: null

    # Duration the worker pool will wait for a buildkit pod to become ready for traffic
    # Defaults to 180
    poolEndpointWatchTimeout: null

    # Duration the build will wait to fetch and extract the remote Docker context.
    # Defaults to 4.25 mins for fetch retries and an unlimited amount of time to extract.
    fetchAndExtractTimeout: null

    # Global secrets (name: path) to expose into all image builds
    secrets: {}

    # Cloud-based registry credentials configuration
    cloudRegistryAuth:
      # Azure credentials required to access ACR
      azure:
        enabled: false
        tenantID: ""
        clientID: ""
        clientSecret: ""
        workloadIdentity: false
      # GCP credentials required to access GCR
      gcp:
        enabled: false
        serviceAccount: ""

    # Build status messaging configuration
    messaging:
      # Enable message publisher
      enabled: false
      # Remote AMQP server configuration
      amqp:
        url: "amqp://user:password@rabbitmq.default:5672"
        exchange: ""
        queue: "hephaestus.imagebuilds.status"
      # Remote Kafka cluster configuration
      kafka: {}

    # Manager logging configuration
    logging:
      # Level at which stacktraces are printed can be either 'info', 'error', or 'panic'
      stacktraceLevel: error
      # Logs sent to stdout/stderr
      container:
        # Level can be 'debug', 'info', 'error', or any integer value >= 0 which corresponds to custom debug levels of increasing verbosity
        level: info
        # Defaults to 'console' but can also be 'json'
        encoding: console
      # Logs sent to JSON file for post-processing. These logs are only produced when log processor is enabled
      logfile:
        level: info

    # Configure manager container security context
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
          drop:
          - ALL

    # Extra environment variables provided to the manager container
    extraEnvVars: []

    # Additional volume mounts added to the manager container
    extraVolumeMounts: []

    # Resource requests and limits
    resources:
      requests: {}
      limits: {}

  # Log processor configuration
  vector:
    # Enable log processing sidecar container
    enabled: true

    # Vector image
    image:
      registry: ""
      repository: timberio/vector
      tag: 0.37.X-distroless-static
      pullPolicy: IfNotPresent
      pullSecrets: []

    # Configure the transformation and delivery of your logs using "hephaestus_output" as the name of your input
    config:
      # See https://vector.dev/docs/reference/configuration/transforms/
      transforms: {}
      # See https://vector.dev/docs/reference/configuration/sinks/
      sinks:
        stdout:
          type: console
          inputs:
            - hephaestus_output
          encoding:
            codec: json

    # Additional volume mounts added to the vector container
    extraVolumeMounts: []

    # Resource requests and limits
    resources:
      requests: {}
      limits: {}

# Buildkit cluster configuration
buildkit:
  # Run buildkit in rootless mode
  rootless: true

  # UID for rootless user in rootless mode
  # NOTE: You MUST have a custom image if using anything other than 1000
  rootlessUser: 1000

  # Amount of storage GC keeps locally (bytes). This value should be less than the
  # total amount of available persistent storage (e.g. 75% of 20Gi)
  gcKeepStorage: 15000000000

  # Enable debug logging
  debug: false

  # Add a ConfigMap containing custom CAs if you need to push images to one or
  # more registries that use self-signed certificates
  customCABundle: ""

  # Buildkit image
  image:
    registry: ""
    repository: moby/buildkit
    tag: v0.16.0
    pullPolicy: IfNotPresent
    pullSecrets: []

  # Buildkit image
  rootlessImage:
    registry: ""
    repository: moby/buildkit
    tag: v0.16.0-rootless
    pullPolicy: IfNotPresent
    pullSecrets: []

  # Peristent build cache settings
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 20Gi
    annotations: {}

  # Buildkitd liveness probe
  livenessProbe:
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # Buildkitd readiness probe
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  # Resource requests and limits
  resources:
    requests: {}
    limits: {}

  # Control client/server mTLS settings
  mtls:
    enabled: true

  # gRPC API service settings
  service:
    type: ClusterIP
    port: 1234
    portName: daemon

  # Service account configuration
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # Number of buildkit pods to run
  replicaCount: 0

  # Extra labels for buildkit pods
  podLabels: {}

  # Annotations for buildkit pods
  podAnnotations: {}

  # Tolerations for buildkit pod assignment
  tolerations: []

  # Node labels for buildkit pod assignment
  nodeSelector: {}

  # Buildkit pods priorityClassName
  priorityClassName: ""

  # Affinities for buildkit pod assignment
  affinity: |-
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 50
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                    - {{ .Release.Name }}
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - {{ .Chart.Name }}
            topologyKey: "topology.kubernetes.io/zone"
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                    - {{ .Release.Name }}
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - {{ .Chart.Name }}
            topologyKey: "kubernetes.io/hostname"
