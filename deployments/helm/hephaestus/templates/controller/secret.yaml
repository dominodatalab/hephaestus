apiVersion: v1
kind: Secret
metadata:
  name: {{ include "hephaestus.configSecretName" . }}
  labels:
    {{- include "hephaestus.controller.labels.standard" . | nindent 4 }}
type: Opaque
stringData:
  config.yaml: |
    newRelic:
      {{- with .Values.newRelic }}
      enabled: {{ .enabled }}
      appName: {{ .appName | quote }}
      licenseKey: {{ .licenseKey | quote }}
      labels:
        {{- .labels | toYaml | nindent 8 }}
      {{- end }}
    buildkit:
      namespace: {{ .Release.Namespace }}
      daemonPort: {{ .Values.buildkit.service.port }}
      serviceName: {{ include "hephaestus.buildkit.fullname" . }}
      statefulSetName: {{ include "hephaestus.buildkit.fullname" . }}
      {{- if .Values.buildkit.mtls.enabled }}
      mtls:
        caCertPath: /etc/hephaestus/x509/ca.crt
        certPath: /etc/hephaestus/x509/tls.crt
        keyPath: /etc/hephaestus/x509/tls.key
      {{- end }}
      podLabels:
        {{- include "hephaestus.buildkit.labels.matchLabels" . | nindent 8 }}
      {{- with .Values.controller.manager.poolSyncWaitTime }}
      poolSyncWaitTime: {{ . | quote }}
      {{- end }}
      {{- with .Values.controller.manager.poolMaxIdleTime }}
      poolMaxIdleTime: {{ . | quote }}
      {{- end }}
      {{- with .Values.controller.manager.poolEndpointWatchTimeout }}
      poolEndpointWatchTimeout {{ . | quote }}
      {{- end }}
      {{- with .Values.controller.manager.fetchAndExtractTimeout }}
      fetchAndExtractTimeout {{ . | quote }}
      {{- end }}
      {{- with .Values.controller.manager.secrets }}
      secrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.registries }}
      registries:
        {{- range $domain, $opts := . }}
        {{ $domain }}:
          {{- toYaml $opts | nindent 10 }}
        {{- end }}
      {{- end }}
    {{- with .Values.controller.manager }}
    manager:
      healthProbeAddr: ":{{ .healthProbePort }}"
      metricsAddr: ":{{ .metricsPort }}"
      webhookPort: {{ .webhookPort }}
      watchNamespaces: {{ .watchNamespaces }}
      imageBuild:
        concurrency: {{ .imageBuild.concurrency }}
        historyLimit: {{ .imageBuild.historyLimit }}
    logging:
      stacktraceLevel: {{ .logging.stacktraceLevel | quote }}
      container:
        encoder: {{ .logging.container.encoding | quote }}
        level: {{ .logging.container.level | quote }}
      logfile:
        enabled: {{ $.Values.controller.vector.enabled }}
        filepath: {{ include "hephaestus.logfilePath" $ | quote }}
        level: {{ .logging.logfile.level | quote }}
    messaging:
      {{- with .messaging }}
      enabled: {{ .enabled }}
      amqp:
        url: {{ .amqp.url | quote }}
        exchange: {{ .amqp.exchange | quote }}
        queue: {{ .amqp.queue | quote }}
      kafka: {{ .kafka | toYaml }}
      {{- end }}
    {{- end }}
  {{- if .Values.controller.vector.enabled }}
  vector.yaml: |
    api:
      enabled: true
      address: 0.0.0.0:8686
    sources:
      hephaestus_output:
        type: file
        include:
          - {{ include "hephaestus.logfilePath" . }}
      {{- if .Values.newRelic.enabled }}
      internal_metrics:
        type: internal_metrics
      {{- end }}
    {{- with .Values.controller.vector.config.transforms }}
    transforms:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    {{- if or .Values.controller.vector.config.sinks .Values.newRelic.enabled }}
    sinks:
      {{- with .Values.controller.vector.config.sinks }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- if .Values.newRelic.enabled }}
      prometheus_remote_write:
        type: prometheus_remote_write
        inputs:
          - internal_metrics
        endpoint: https://metric-api.newrelic.com/prometheus/v1/write?prometheus_server={{ .Values.newRelic.appName }}
        auth:
          strategy: bearer
          token: {{ .Values.newRelic.licenseKey }}
      {{- end }}
    {{- end }}
  {{- end }}
